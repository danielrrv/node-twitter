#!/usr/bin/env node
"use strict"
/**
 * Module dependencies.
 */
require('dotenv').config();
// const app = require('./dist/lib/server');
const app = require('./dist/src/app')
const http = require('http');
const HOST = '127.0.0.1';



//const app = new Application(connection)


/**
 * Get port from environment and store in Express.
 */

const PORT = normalizePort(process.env.PORT || '3000');


/**
 * Create HTTP server.
 */

const server = http.createServer(app.handle);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(PORT, () => {
  console.log(`Server listening on http://${HOST}:${PORT}`)
});
server.on('error', onError);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + PORT
    : 'Port ' + PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */